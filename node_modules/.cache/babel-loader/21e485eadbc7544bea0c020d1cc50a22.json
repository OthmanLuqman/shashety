{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"single-item\",\n  props: [\"numOfSlide\"],\n  data: function data() {\n    return {\n      settings: {\n        dots: false,\n        arrows: false,\n        focusOnSelect: true,\n        infinite: true,\n        autoplay: true,\n        speed: 500,\n        slidesToScroll: 1,\n        touchThreshold: 2\n      }\n    };\n  },\n  computed: {\n    getOfInfoItems: function getOfInfoItems() {\n      var _this = this;\n\n      var data = this.$store.getters[\"infoItems/getOfInfoItems\"];\n      console;\n      return data.filter(function (info) {\n        return info.cover == _this.numOfSlide.cover;\n      });\n    },\n    numOfSlides: function numOfSlides() {\n      return this.numOfSlide;\n    }\n  },\n  methods: {\n    toggle: function toggle(id) {\n      this.$store.dispatch(\"infoItems/toggle\", id);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;EACAA,mBADA;EAEAC,qBAFA;EAGAC;IAAA;MACAC;QACAC,WADA;QAEAC,aAFA;QAGAC,mBAHA;QAIAC,cAJA;QAKAC,cALA;QAMAC,UANA;QAOAC,iBAPA;QAQAC;MARA;IADA;EAAA,CAHA;EAeAC;IACAC,cADA,4BACA;MAAA;;MACA;MACAC;MACA;QAAA;MAAA;IACA,CALA;IAMAC,WANA,yBAMA;MACA;IACA;EARA,CAfA;EAyBAC;IACAC;MACA;IACA;EAHA;AAzBA","names":["name","props","data","settings","dots","arrows","focusOnSelect","infinite","autoplay","speed","slidesToScroll","touchThreshold","computed","getOfInfoItems","console","numOfSlides","methods","toggle"],"sourceRoot":"src/components","sources":["Item.vue"],"sourcesContent":["/* eslint-disable vue/multi-word-component-names */\n<template>\n  <div class=\"single-item container-fluid\">\n    <VueSlickCarousel\n      v-bind=\"settings\"\n      :slidesToShow=\"numOfSlides.num\"\n      v-if=\"getOfInfoItems.length\"\n    >\n      <div\n        class=\"item-list\"\n        v-for=\"infoItem in getOfInfoItems\"\n        :key=\"infoItem.id\"\n      >\n        <router-link :to=\"'/Single/' + infoItem.id\">\n          <div class=\"image-box\">\n            <img :src=\"infoItem.image\" alt=\"index\" />\n          </div>\n        </router-link>\n        <div class=\"ShowMe\">\n          <button\n            :class=\"[infoItem.like ? 'green' : 'gray']\"\n            @click=\"toggle(infoItem.id)\"\n          >\n            Like\n          </button>\n        </div>\n      </div>\n    </VueSlickCarousel>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"single-item\",\n  props: [\"numOfSlide\"],\n  data: () => ({\n    settings: {\n      dots: false,\n      arrows: false,\n      focusOnSelect: true,\n      infinite: true,\n      autoplay: true,\n      speed: 500,\n      slidesToScroll: 1,\n      touchThreshold: 2,\n    },\n  }),\n  computed: {\n    getOfInfoItems() {\n      const data = this.$store.getters[\"infoItems/getOfInfoItems\"];\n      console\n      return data.filter((info) => info.cover == this.numOfSlide.cover);\n    },\n    numOfSlides() {\n      return this.numOfSlide;\n    },\n  },\n  methods: {\n    toggle: function (id) {\n      this.$store.dispatch(\"infoItems/toggle\", id);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.single-item {\n  .item-list {\n    .image-box {\n      height: 400px;\n      margin: 10px;\n      img {\n        display: block;\n        width: 100%;\n        height: 100%;\n        border-radius: 10px;\n      }\n    }\n    .ShowMe {\n      display: flex;\n      justify-content: center;\n      width: 100%;\n      button {\n        border: none;\n        border-radius: 8px;\n        background: dimgrey;\n        font-size: 14px;\n        margin: 0 5px;\n        width: 80%;\n        outline: none;\n        transition: all 0.5s linear;\n        &:hover {\n          transform: scale(1.1);\n        }\n      }\n      .green {\n        background: rgb(39, 207, 193);\n        color: white;\n      }\n      .gray {\n        background: dimgrey;\n        color: white;\n      }\n    }\n  }\n}\n::-webkit-scrollbar {\n  width: 0; /* Remove scrollbar space */\n  background: transparent; /* Optional: just make scrollbar invisible */\n}\n/* Optional: show position indicator in red */\n::-webkit-scrollbar-thumb {\n  background: transparent;\n}\n.image-width-full {\n  width: 100%;\n}\n.image-width {\n  width: 100%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}